pipeline {
    agent {
        node {
            label 'AGENT-1'
        }
    }

    environment {
        GREETING = 'Hello Jenkins'
    }

    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy',], description: 'Pick something')
    }

    stages {
        stage('Initiating Terraform') {
            steps {
                sh """
                    cd 01-vpc
                    terraform init -reconfigure
                """
            }
        }
        stage('Planning Terraform') {
            steps {
                sh """
                    cd 01-vpc
                    terraform plan
                """
            }    
        }
        stage('Apply terraform') {
            when {
                expression {
                    ${params.ACTION} == 'apply' 
                }
            }
            input {
                message "Should we apply?"
                ok "Yes, we should."
                // submitter "alice,bob"
                // parameters {
                //     string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')
                // }
            }
            steps {
                sh """
                    cd 01-vpc
                    terraform apply -auto-approve
                """
            }
        }
        stage('Destroying Terraform') {
            when {
                expression {
                    ${params.ACTION} == 'destroy' 
                }
            }
            steps {
                sh """
                    cd 01-vpc
                    terraform destroy -auto-approve
                """
            }
        }
    }

    //POST Stages
    post { 
        always { 
            echo 'Pipeline is executed'
        }
        failure {
            echo 'The pipeline is Failed, Please send some alerts'
        }
        success {
            echo 'Pipeline executed successfully'
        }
    }
}
